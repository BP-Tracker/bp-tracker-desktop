#!/usr/bin/env node

var dotenv = require('dotenv');
var debug = require('debug')('dashboard:server');
var http = require('http');
var path = require('path');
var fs = require('fs');
var expressSession = require('express-session');

var App = require('../app');
var FileStreamRotator = require('file-stream-rotator');
var WebSocket = require('../websocket');
var FileStore = require('session-file-store')(expressSession);

dotenv.load();

var port = process.env.BPT_PORT || 3000;

// logging
var logDir = process.env.BPT_LOG_DIR || path.join(__dirname, '../logs');
fs.existsSync(logDir) || fs.mkdirSync(logDir);

var logStream = FileStreamRotator.getStream({ //TODO: refactor
  date_format: 'YYYYMMDD',
  filename: path.join(logDir, 'access-%DATE%.log'),
  frequency: 'daily',
  verbose: false
});


var session = expressSession({
  store: new FileStore({
    path: process.env.BPT_TMP_FOLDER,
    ttl: 3600, // 1 hr
  }),
  resave: false, //TODO what is this?
  saveUninitialized: true,
  name: process.env.BPT_SESSION_NAME,
  secret: process.env.BPT_SESSION_SECRET,
  cookie: {
    // secure: app.get('env') === 'production' TODO
  }
});

var app = new App({ port: port, session: session, logStream: logStream });
var server = http.createServer(app.getExpress());
var socket = new WebSocket(server, { serveClient: true }, { session: session });



/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }
  switch (error.code) {
    case 'EACCES':
      console.error('Port requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error('Port is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
